version: '3.8'

services:
  # SQL Server Database
  sql-server:
    image: mcr.microsoft.com/mssql/server:2022-latest
    container_name: base-sql-server
    environment:
      - ACCEPT_EULA=Y
      - SA_PASSWORD=YourStrong!Passw0rd
      - MSSQL_PID=Developer
    ports:
      - "1433:1433"
    volumes:
      - sql-server-data:/var/opt/mssql
    networks:
      - base-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "/opt/mssql-tools18/bin/sqlcmd -S localhost -U sa -P YourStrong!Passw0rd -C -Q 'SELECT 1'"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: base-redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - base-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5

  # Admin Portal
  admin-portal:
    build:
      context: .
      dockerfile: docker/Dockerfile.adminportal
    container_name: base-admin-portal
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - API_URL=http://api-gateway:8080
    networks:
      - base-network
    depends_on:
      - api-gateway
    restart: unless-stopped

  # User Management Service
  user-management:
    build:
      context: .
      dockerfile: docker/Dockerfile.usermanagement
    container_name: base-user-management
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ConnectionStrings__DefaultConnection=Server=sql-server;Database=baseUserManagement;User Id=sa;Password=YourStrong!Passw0rd;TrustServerCertificate=true;
      - ConnectionStrings__Redis=redis:6379
      - JwtSettings__SecretKey=YourSuperSecretKeyThatShouldBeAtLeast32CharactersLong!
      - JwtSettings__Issuer=basePlatform
      - JwtSettings__Audience=baseUsers
      - JwtSettings__ExpiryInDays=7
      - Serilog__MinimumLevel=Information
    ports:
      - "5001:8080"
    depends_on:
      sql-server:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - base-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8080/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # API Gateway
  api-gateway:
    build:
      context: .
      dockerfile: docker/Dockerfile.gateway
    container_name: base-api-gateway
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - Serilog__MinimumLevel=Information
    ports:
      - "5000:80"
    depends_on:
      user-management:
        condition: service_healthy
    networks:
      - base-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:80/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  sql-server-data:
    driver: local
  redis-data:
    driver: local

networks:
  base-network:
    driver: bridge
